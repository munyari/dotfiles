#!/bin/env ruby
require 'set'
require 'optparse'
require 'shellwords'
# TODO: mention that this is an external gem dependency, emancu/toml-rb
require 'toml'

# ignored_files = Set.new [ 'tags' ]
# # grab each element in the directory
# Dir.foreach Dir.getwd do |item|
#   p item if item =~ /[^\.{1,2]/
# end
ignored_files = Set.new %w[ tags ]

options = Hash.new(false)
OptionParser.new do |opts|
  opts.banner = "Install my configuration files"
  opts.banner << "\n\nUsage: install [options]"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = true
  end

  opts.on("-h", "--help", "Prints this help") do |h|
    puts opts
    exit
  end

  opts.on("-i [FILES]", "--ignore [FILES]", Array, "Ignore (comma-separated) FILES") do |file|
    puts "Ok, ignoring #{file}"
  end
end.parse!

p options
p ARGV

# TODO: config.toml is optional
# I think I can use Ruby's merge method, so any options that aren't set on the
# command line are set here

if File.exists? "config.toml"
  config = TOML.load_file("config.toml")
  p config
  ignored_files.merge(config["ignore"]) if config["ignore"]
end

p ignored_files
# Toml.parse(
# Options = Struct.new(:name)

# class Parser
#   def self.parse(options)
#     args = Options.new("world")

#     opt_parser = OptionParser.new do |opts|
#       opts.banner = "Usage: example.rb [options]"

#       opts.on("-nNAME", "--name=NAME", "Name to say hello to") do |n|
#         args.name = n
#       end

#       opts.on("-h", "--help", "Prints this help") do
#         puts opts
#         exit
#       end
#     end

#     opt_parser.parse!(options)
#     return args
#   end
# end
# options = Parser.parse %w[--help]
